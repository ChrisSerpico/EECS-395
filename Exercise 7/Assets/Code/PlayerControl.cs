using UnityEngine;
using UnityEngine.UI;

/// <summary>
/// Control code for the the player's game object.
/// Very approximate simulation of flight dynamics.
/// </summary>
public class PlayerControl : MonoBehaviour {
    /// <summary>
    /// Coefficient of draft for head winds
    /// </summary>
    [Header("Aerodynamic coefficients")]
    public float ForwardDragCoefficient = 0.01f;
    /// <summary>
    /// Drag coefficient for winds blowing up/down across wings
    /// </summary>
    public float VerticalDragCoefficient = 0.5f;
    /// <summary>
    /// Lift generated by the wings
    /// </summary>
    public float LiftCoefficient = 0.01f;

    /// <summary>
    /// How far the plane can tilt around the X axis
    /// </summary>
    [Header("Movement Speeds")]
    public float PitchRange = 45f;
    /// <summary>
    /// How far the plane can rotate about the Z axis
    /// </summary>
    public float RollRange = 45;
    /// <summary>
    /// How fast the plane yaws for a given degree of roll.
    /// </summary>
    public float RotationalSpeed = 5f;
    /// <summary>
    /// Thrust generated when the throttle is pulled back all the way.
    /// </summary>
    public float MaximumThrust = 20f;

    /// <summary>
    /// Text element for displaying status information
    /// </summary>
    [Header("HUD")]
    public Text StatusDisplay;
    /// <summary>
    /// Text element for displaying game-over text
    /// </summary>
    public Text GameOverText;

    /// <summary>
    /// Cached copy of the player's RigidBody component
    /// </summary>
    private Rigidbody playerRB;


    /// <summary>
    /// Magic layer mask code for the updraft(s)
    /// </summary>
    const int UpdraftLayerMask = 1 << 8;


    #region Internal flight state
    /// <summary>
    /// Current yaw (rotation about the Y axis)
    /// </summary>
    private float yaw;
    /// <summary>
    /// Current pitch (rotation about the X axis)
    /// </summary>
    private float pitch;
    /// <summary>
    /// Current roll (rotation about the Z axis)
    /// </summary>
    private float roll;
    /// <summary>
    /// Current thrust (forward force provided by engines
    /// </summary>
    private float thrust;
#endregion

    /// <summary>
    /// Initialize component
    /// </summary>
    internal void Start() {
        playerRB = GetComponent<Rigidbody>();
        playerRB.velocity = transform.forward*3;
    }

    /// <summary>
    /// Show game-over display
    /// </summary>
    /// <param name="safe">True if we won, false if we crashed</param>
    private void OnGameOver(bool safe) {
        playerRB.velocity = Vector3.zero;
        playerRB.useGravity = false;
        playerRB.constraints = RigidbodyConstraints.FreezeAll;
        if (safe) {
            GameOverText.text = "You Win!";
        } else {
            GameOverText.text = "OOPS";
        }
    }

    /// <summary>
    /// Display status information
    /// </summary>
    internal void OnGUI()
    {
        StatusDisplay.text = string.Format("Speed: {0:00.00}    altitude: {1:00.00}    Thrust {2:0.0}",
            playerRB.velocity.magnitude,
            transform.position.y,
            thrust);
    }

    internal void FixedUpdate()
    {
        // TURNING 
        roll = Mathf.Lerp(roll, Input.GetAxis("Horizontal") * RollRange, 0.01f);
        pitch = Mathf.Lerp(pitch, Input.GetAxis("Vertical") * PitchRange, 0.01f);
        yaw = -roll * RotationalSpeed * Time.fixedDeltaTime; // math here should convert derivative of yaw into yaw  

        // make a quaternion 
        Quaternion q = new Quaternion();
        q = Quaternion.Euler(pitch, yaw + transform.rotation.eulerAngles.y, roll);

        GetComponent<Rigidbody>().MoveRotation(q); 

        // THRUST
        thrust = Mathf.Clamp(Input.GetAxis("Thrust") * MaximumThrust, 0f, MaximumThrust);

        // get relative velocity of air
        Vector3 relVelocity = new Vector3();
        if (Physics.OverlapSphere(transform.position, 1f, LayerMask.GetMask("Updrafts")).Length <= 0)
            relVelocity = -GetComponent<Rigidbody>().velocity;
        else
            relVelocity = Physics.OverlapSphere(transform.position, 1f, LayerMask.GetMask("Updrafts"))[0].GetComponent<Updraft>().WindVelocity - GetComponent<Rigidbody>().velocity; 
        
        // LIFT
        float vf = Vector3.Dot(relVelocity, transform.forward);
        Vector3 liftForce = LiftCoefficient * Mathf.Pow(vf, 2) * transform.up; 

        // DRAG
        Vector3 forwardDrag = Mathf.Sign(vf) * ForwardDragCoefficient * Mathf.Pow(vf, 2) * transform.forward; 
        float vup = Vector3.Dot(relVelocity, transform.up);
        Vector3 verticalDrag = Mathf.Sign(vup) * VerticalDragCoefficient * Mathf.Pow(vup, 2) * transform.up; 

        // Finally, add calculated forces 
        GetComponent<Rigidbody>().AddForce(transform.forward * thrust);
        GetComponent<Rigidbody>().AddForce(liftForce);
        GetComponent<Rigidbody>().AddForce(forwardDrag);
        GetComponent<Rigidbody>().AddForce(verticalDrag);
    }

    internal void OnCollisionEnter(Collision other)
    {
        bool won = (other.collider.GetComponent<LandingPlatform>() != null && GetComponent<Rigidbody>().velocity.magnitude < other.collider.GetComponent<LandingPlatform>().MaxLandingSpeed);
        OnGameOver(won); 
    }
}
